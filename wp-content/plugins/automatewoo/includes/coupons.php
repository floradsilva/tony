<?php
// phpcs:ignoreFile

namespace AutomateWoo;

/**
 * @class Coupons
 * @since 2.9
 */
class Coupons {


	/**
	 * Offset coupon cleaning to avoid overloading the worker
	 */
	static function schedule_clean_expired() {
		if ( AW()->options()->clean_expired_coupons ) {
			wp_schedule_single_event( time() + ( MINUTE_IN_SECONDS * 10 ), 'automatewoo/coupons/clean_expired' );
		}
	}


	/**
	 * Delete a set amount of expired coupons that were generated by AW
	 */
	static function clean_expired() {

		$process = Background_Processes::get( 'delete_expired_coupons' );

		// don't start a new process until the previous is finished
		if ( $process->has_queued_items() ) {
			$process->maybe_schedule_health_check();
			return;
		}

		$limit = apply_filters( 'automatewoo/coupons/clean_expired_limit', 200 );
		$days_to_keep_expired = (int) apply_filters( 'automatewoo/coupons/days_to_keep_expired', 14 );

		$delete_date = new DateTime();
		$delete_date->modify( "-$days_to_keep_expired days" );

		$query_args = [
			'fields' => 'ids',
			'post_type' => 'shop_coupon',
			'post_status' => 'any',
			'posts_per_page' => $limit,
			'orderby' => 'date',
			'order' => 'ASC',
			'no_found_rows' => true,
			'meta_query' => [
				[
					'key' => '_is_aw_coupon',
					'value' => true
				],
				[
					'key' => 'expiry_date',
					'value' => $delete_date->format( 'Y-m-d' ),
					'compare' => '<',
					'type' => 'DATE'
				]
			]
		];

		$query = new \WP_Query( $query_args );

		if ( ! $query->posts ) {
			return;
		}

		$process->data( $query->posts )->start();
	}

}
